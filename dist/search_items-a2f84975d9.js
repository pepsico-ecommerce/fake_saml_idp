searchNodes=[{"doc":"Fake SAML identity provider. This app provides a plug, FakeSamlIdp , that you can host within your existing Plug application to serve as a mock SAML identity provider. It will receive well-formed SAML login requests, process them, and return a well-formed SAML response on valid input. It also provides a basic login page, allowing it to act as a drop-in replacement for a full-featured SAML authentication provider. Usage In most cases, setup should be as easy as adding forward &quot;/sso/fake_idp&quot; , to : FakeSamlIdp , public_cert : &quot;/path/to/public/cert&quot; , private_key : &quot;/path/to/private/key&quot; , accounts : [ %{ &quot;email&quot; =&gt; &quot;admin@example.com&quot; , &quot;firstName&quot; =&gt; &quot;Admin&quot; , &quot;lastName&quot; =&gt; &quot;User&quot; , &quot;userId&quot; =&gt; &quot;123456&quot; } ] to your router. Configuration Configuration may be provided directly to the FakeSamlIdp plug, usually when invoking the forward macro. You may also configure everything in config.exs , and load from there instead: # config.exs config :my_app , FakeSamlIdp , public_cert : &quot;/path/to/public/cert&quot; , private_key : &quot;/path/to/private/key&quot; , accounts : [ ... ] # router.ex forward &quot;/sso/fake_idp&quot; , to : FakeSamlIdp , init_opts : Application . get_env ( :my_app , FakeSamlIdp ) Additionally, you may provide configuration dynamically at runtime by providing an MFA tuple to :init_opts : # router.ex forward &quot;/sso/fake_idp&quot; , to : FakeSamlIdp , init_opts : { RuntimeConfig , :load_idp_config , [ ] } # my_app.ex defmodule RuntimeConfig do @config [ public_cert : &quot;...&quot; , private_key : &quot;...&quot; ] def load_idp_config do Keyword . merge ( @config , accounts : [ ... ] ) end end See FakeSamlIdp.Options for detailed configuration options. Integrating with Samly Samly is a popular Elixir-based SAML adapter. Integration with FakeSamlIdp is straightforward: # config.exs config :samly , Samly.Provider , idp_id_from : :path_segment , service_providers : [ %{ id : &quot;my_app&quot; , entity_id : &quot;urn:myapp.dev:auth-entity&quot; , certfile : &quot;/path/to/public/cert&quot; , keyfile : &quot;/path/to/private/key&quot; } ] , identity_providers : [ %{ id : &quot;fake_saml_idp&quot; , sp_id : &quot;my_app&quot; , base_url : &quot;http://localhost:4000/sso&quot; , metadata_file_location : &quot;/path/to/metadata/file&quot; , nameid_format : &quot;entity&quot; , pre_session_create_pipeline : MyApp.SAMLPipeline , signed_envelopes_in_resp : false } ] Make sure you're using the same public cert/private key in :service_providers that you're using with FakeSamlIdp , or the handshake won't complete. To generate a metadata file, you can use the included mix task mix fake_saml_idp . generate_metadata &quot;/path/to/public/cert&quot; This will generate an XML metadata file that assumes your fake SAML IDP will be mounted at /sso/fake_idp . If this is not the case, make sure to edit the SingleSignOnService and SingleLogoutService endpoints accordingly. If you need a public cert and private key as well, you can use the other mix task mix fake_saml_idp . generate_cert","ref":"FakeSamlIdp.html","title":"FakeSamlIdp","type":"module"},{"doc":"Options for configuring the FakeSamlIdp plug. Options :enabled - whether the fake SAML IDP should be enabled (default: true ) :public_cert - path to a public certificate (required) :private_key - path to the corresponding private key (required) :accounts - list of account details (must include &quot;email&quot; for each) (required)","ref":"FakeSamlIdp.Options.html","title":"FakeSamlIdp.Options","type":"module"},{"doc":"Construct an %Options{} struct. This will also read and decode the public certificate and private key, bailing out early if any errors are encountered. Runtime Config If you'd like to configure the IDP at runtime, you may instead supply an MFA tuple, which will be invoked to generate options on each request. This MFA should return a keyword list of options.","ref":"FakeSamlIdp.Options.html#new/1","title":"FakeSamlIdp.Options.new/1","type":"function"},{"doc":"","ref":"FakeSamlIdp.Options.html#t:t/0","title":"FakeSamlIdp.Options.t/0","type":"type"},{"doc":"Generate a public cert and private key, suitable for use with SAML.","ref":"Mix.Tasks.FakeSamlIdp.GenerateCert.html","title":"Mix.Tasks.FakeSamlIdp.GenerateCert","type":"task"},{"doc":"Generate an XML SAML metadata file from the given public cert.","ref":"Mix.Tasks.FakeSamlIdp.GenerateMetadata.html","title":"Mix.Tasks.FakeSamlIdp.GenerateMetadata","type":"task"}]